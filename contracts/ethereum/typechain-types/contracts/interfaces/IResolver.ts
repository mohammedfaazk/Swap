/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IResolver {
  export type ResolverInfoStruct = {
    stake: BigNumberish;
    reputation: BigNumberish;
    totalVolume: BigNumberish;
    successRate: BigNumberish;
    avgResponseTime: BigNumberish;
    active: boolean;
    registrationTime: BigNumberish;
  };

  export type ResolverInfoStructOutput = [
    stake: bigint,
    reputation: bigint,
    totalVolume: bigint,
    successRate: bigint,
    avgResponseTime: bigint,
    active: boolean,
    registrationTime: bigint
  ] & {
    stake: bigint;
    reputation: bigint;
    totalVolume: bigint;
    successRate: bigint;
    avgResponseTime: bigint;
    active: boolean;
    registrationTime: bigint;
  };
}

export interface IResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getResolverInfo"
      | "getTopResolvers"
      | "isActiveResolver"
      | "registerResolver"
      | "slashResolver"
      | "updateReputation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ReputationUpdated"
      | "ResolverRegistered"
      | "ResolverSlashed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getResolverInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopResolvers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveResolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerResolver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashResolver",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getResolverInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopResolvers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    resolver: AddressLike,
    oldReputation: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    resolver: string,
    oldReputation: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    resolver: string;
    oldReputation: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolverRegisteredEvent {
  export type InputTuple = [
    resolver: AddressLike,
    stake: BigNumberish,
    reputation: BigNumberish
  ];
  export type OutputTuple = [
    resolver: string,
    stake: bigint,
    reputation: bigint
  ];
  export interface OutputObject {
    resolver: string;
    stake: bigint;
    reputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolverSlashedEvent {
  export type InputTuple = [
    resolver: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [resolver: string, amount: bigint, reason: string];
  export interface OutputObject {
    resolver: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IResolver extends BaseContract {
  connect(runner?: ContractRunner | null): IResolver;
  waitForDeployment(): Promise<this>;

  interface: IResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getResolverInfo: TypedContractMethod<
    [resolver: AddressLike],
    [IResolver.ResolverInfoStructOutput],
    "view"
  >;

  getTopResolvers: TypedContractMethod<
    [count: BigNumberish],
    [string[]],
    "view"
  >;

  isActiveResolver: TypedContractMethod<
    [resolver: AddressLike],
    [boolean],
    "view"
  >;

  registerResolver: TypedContractMethod<
    [minStake: BigNumberish],
    [void],
    "payable"
  >;

  slashResolver: TypedContractMethod<
    [resolver: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  updateReputation: TypedContractMethod<
    [resolver: AddressLike, success: boolean, responseTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getResolverInfo"
  ): TypedContractMethod<
    [resolver: AddressLike],
    [IResolver.ResolverInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopResolvers"
  ): TypedContractMethod<[count: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isActiveResolver"
  ): TypedContractMethod<[resolver: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerResolver"
  ): TypedContractMethod<[minStake: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "slashResolver"
  ): TypedContractMethod<
    [resolver: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [resolver: AddressLike, success: boolean, responseTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ResolverRegistered"
  ): TypedContractEvent<
    ResolverRegisteredEvent.InputTuple,
    ResolverRegisteredEvent.OutputTuple,
    ResolverRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ResolverSlashed"
  ): TypedContractEvent<
    ResolverSlashedEvent.InputTuple,
    ResolverSlashedEvent.OutputTuple,
    ResolverSlashedEvent.OutputObject
  >;

  filters: {
    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "ResolverRegistered(address,uint256,uint256)": TypedContractEvent<
      ResolverRegisteredEvent.InputTuple,
      ResolverRegisteredEvent.OutputTuple,
      ResolverRegisteredEvent.OutputObject
    >;
    ResolverRegistered: TypedContractEvent<
      ResolverRegisteredEvent.InputTuple,
      ResolverRegisteredEvent.OutputTuple,
      ResolverRegisteredEvent.OutputObject
    >;

    "ResolverSlashed(address,uint256,string)": TypedContractEvent<
      ResolverSlashedEvent.InputTuple,
      ResolverSlashedEvent.OutputTuple,
      ResolverSlashedEvent.OutputObject
    >;
    ResolverSlashed: TypedContractEvent<
      ResolverSlashedEvent.InputTuple,
      ResolverSlashedEvent.OutputTuple,
      ResolverSlashedEvent.OutputObject
    >;
  };
}

version: '3.8'

services:
  # Production PostgreSQL with optimizations
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: stellarbridge
      POSTGRES_USER: stellarbridge
      POSTGRES_PASSWORD: hackathon2024_secure
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./relayer/prisma/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    command: postgres -c 'max_connections=200' -c 'shared_buffers=256MB'

  # Redis for high-performance caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Main relayer service
  relayer:
    build: 
      context: ./relayer
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://stellarbridge:${POSTGRES_PASSWORD:-hackathon2024_secure}@postgres:5432/stellarbridge
      - REDIS_URL=redis://redis:6379
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - STELLAR_RPC_URL=${STELLAR_RPC_URL}
    depends_on:
      - postgres
      - redis
    ports:
      - "8080:8080"
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_NETWORK=testnet
    ports:
      - "3000:3000"
    depends_on:
      - relayer

  # Real-time monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  # Beautiful dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hackathon2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards

  # Load balancer for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - relayer

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: stellarbridge-network
